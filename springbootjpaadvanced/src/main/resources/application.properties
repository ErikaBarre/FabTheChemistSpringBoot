spring.h2.console.enabled=true
spring.jpa.properties.hibernate.generate_statistics=true
#statistique performence de la requete
logging.level.org.org.hibernate.stat=true
spring.jpa.show-sql=true
#format la resquet SQL
spring.jpa.properties.hibernate.format_sql=true
#connaitre le rtpe de parametre
logging.level.org.hibernate.type=trace



#second level cache dans application.properties
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
#specifier le type de cache , dans notre cas c'est EhCache
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
#seulement placer en cache les données dont on veut qu'elle soit en cache
#voirs les options possible dans la classe, ici on utlise ENABLE_SELECTIVE 
spring.jpa.properties.javax.persistent.sharedCache.mode=ENABLE_SELECTIVE  
logging.level.net.sf.ehcache=debug
#what data to cache
#placer l'annotation @Cacheable dans l'entity comme "Course" par exemple
# dans les logs on voit apparaitre "L2C"
# "hits" obtenir les data du 2eme niveau de cache 
# "misses" quand les données ne sont pas dnas le 2eme niveau de cache
# "puts" quand les données vont aller dans le 2eme niveau de cache poour la 1er fois car "misses"